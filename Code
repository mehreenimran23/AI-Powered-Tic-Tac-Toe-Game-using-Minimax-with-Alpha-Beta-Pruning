X = "X"
O = "O"

def initial_state():
 return [["", "", ""],
         ["", "", ""],
         ["", "", ""]]

def player(board):
 xCount = 0
 oCount = 0

 for r in board:
  for i in r:
   if i == X:
    xCount += 1

   elif i == O:
    oCount += 1

 if xCount <= oCount:
  return X
 return O

def actions(board):
 result = []
 for r in range(3):
  for i in range(3):
   if board[r][i] == "":
    result += [(r, i)]
 return result

def result(board, action):
 if action not in actions(board):
  print("Invalid move")
  return board

 c, j = action
 newBoard = [row[:] for row in board]
 newBoard[c][j] = player(board)
 return newBoard

def winner(board):
 for r in range(3):
  if board[r][0] == board[r][1] == board[r][2] and board[r][0] != "":
   return board[r][0]

 for i in range(3):
  if board[0][i] == board[1][i] == board[2][i] and board[0][i] != "":
   return board[0][i]

 if board[0][0] == board[1][1] == board[2][2] and board[0][0] != "":
  return board[0][0]

 if board[0][2] == board[1][1] == board[2][0] and board[0][2] != "":
  return board[0][2]

 return None

def terminal(board):
 if winner(board) is not None:
  return True

 for r in board:
  for i in r:
   if i == "":
    return False
 return True

def utility(board):
 w = winner(board)
 if w == X:
  return 1

 if w == O:
  return -1
 return 0

def alphaBetaPruning(board, alpha=-1000, beta=1000):
 if terminal(board):
  return None, utility(board)

 currPlayer = player(board)
 m = actions(board)

 if currPlayer == X:
  v = -1000
  bmove = None

  for move in m:
   newBoard = result(board, move)
   nmove, bval = alphaBetaPruning(newBoard, alpha, beta)

   if bval > v:                #bval is the value deciding if move is +1 (good) or -1 (bad)
    v = bval
    bmove = move
   alpha = max(alpha, v)

   if alpha >= beta:
    break
  return bmove, v

 else:
  v = 1000
  bmove = None

  for move in m:
   newBoard = result(board, move)
   nmove, bval = alphaBetaPruning(newBoard, alpha, beta)

   if bval < v:
    v = bval
    bmove = move
   beta = min(beta, v)

   if alpha >= beta:
    break
  return bmove, v

def printBoard(board):
 for r in board:
  Board = ""
  for i in r:
   if i == "":
    Board += "   "

   else:
    Board += " " + i + " "
   Board += "|"

  print(Board[:-1])
  print("-" * 9)

def main():
 board = initial_state()
 print("Tic-Tac-Toe")

 printBoard(board)
 while not terminal(board):

  if player(board) == X:
   print("Computer (X) is making a move")
   move, val = alphaBetaPruning(board)

  else:
   while True:

    try:                                        # error handling under this block
     r = int(input("enter row b/w 0-2: "))
     i = int(input("enter col b/w 0-2: "))
     move = (r, i)

     if move in actions(board):
      break
     print("invalid move, try again.")

    except ValueError:                               
     print("invalid input, enter again b/w 0-2.")

  if move is not None:
   board = result(board, move)
   printBoard(board)

 w = winner(board)

 if w is not None:
  print(f"game over {w} is winner!")
 else:
  print("It's a tie!")

if __name__ == "__main__":
 main()
